[versions]
kotlin = "2.2.0"
ktor = "3.2.0"
kotlinx-coroutines = "1.10.2"
kotlinx-serialization = "1.7.3"
kotlinx-datetime = "0.6.1"
exposed = "1.0.0-beta-2"
postgresql = "42.7.4"
flyway = "10.19.0"
hikaricp = "6.2.1"
koin = "4.0.0"
arrow = "1.2.4"
logback = "1.5.12"
micrometer = "1.14.2"
opentelemetry = "1.43.0"
grpc = "1.66.0"
grpc-kotlin = "1.4.1"
protobuf = "4.28.2"
kotest = "5.9.1"
testcontainers = "1.20.4"
mockk = "1.13.14"
detekt = "1.23.7"
ktlint = "12.1.2"
shadow = "8.1.1"
auth0-jwt = "4.5.0"
jbcrypt = "0.4"
docker-java = "3.4.1"
docker-java-transport-httpclient5 = "3.4.1"
clikt = "4.2.2"

[libraries]
# Ktor
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-auth = { module = "io.ktor:ktor-server-auth", version.ref = "ktor" }
ktor-server-auth-jwt = { module = "io.ktor:ktor-server-auth-jwt", version.ref = "ktor" }
ktor-server-websockets = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
ktor-server-sse = { module = "io.ktor:ktor-server-sse", version.ref = "ktor" }
ktor-server-call-logging = { module = "io.ktor:ktor-server-call-logging", version.ref = "ktor" }
ktor-server-metrics-micrometer = { module = "io.ktor:ktor-server-metrics-micrometer", version.ref = "ktor" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-server-compression = { module = "io.ktor:ktor-server-compression", version.ref = "ktor" }
ktor-server-openapi = { module = "io.ktor:ktor-server-openapi", version.ref = "ktor" }
ktor-server-test-host = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-websockets = { module = "io.ktor:ktor-client-websockets", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
kotlin-logging-jvm = { module = "io.github.microutils:kotlin-logging-jvm", version = "3.0.5" }

# Kotlinx
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-jdk8 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlinx-serialization-protobuf = { module = "org.jetbrains.kotlinx:kotlinx-serialization-protobuf", version.ref = "kotlinx-serialization" }

# Kotlinx Additional
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }

# Database
exposed-core = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposed-jdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }
exposed-dao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }
exposed-kotlin-datetime = { module = "org.jetbrains.exposed:exposed-kotlin-datetime", version.ref = "exposed" }
exposed-migration = { module = "org.jetbrains.exposed:exposed-migration", version.ref = "exposed" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
flyway-core = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
flyway-database-postgresql = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }
hikaricp = { module = "com.zaxxer:HikariCP", version.ref = "hikaricp" }

# DI
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-ktor = { module = "io.insert-koin:koin-ktor", version.ref = "koin" }
koin-logger-slf4j = { module = "io.insert-koin:koin-logger-slf4j", version.ref = "koin" }

# Error Handling
arrow-core = { module = "io.arrow-kt:arrow-core", version.ref = "arrow" }
arrow-fx-coroutines = { module = "io.arrow-kt:arrow-fx-coroutines", version.ref = "arrow" }

# Logging
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
kotlin-logging = { module = "io.github.oshai:kotlin-logging-jvm", version = "7.0.0" }
slf4j-api = { module = "org.slf4j:slf4j-api", version = "2.0.16" }

# Observability
micrometer-core = { module = "io.micrometer:micrometer-core", version.ref = "micrometer" }
micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer" }
opentelemetry-api = { module = "io.opentelemetry:opentelemetry-api", version.ref = "opentelemetry" }
opentelemetry-instrumentation-ktor = { module = "io.opentelemetry.instrumentation:opentelemetry-ktor-2.0", version = "2.5.0-alpha" }

# gRPC
grpc-netty-shaded = { module = "io.grpc:grpc-netty-shaded", version.ref = "grpc" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpc-kotlin-stub = { module = "io.grpc:grpc-kotlin-stub", version.ref = "grpc-kotlin" }
grpc-services = { module = "io.grpc:grpc-services", version.ref = "grpc" }
protobuf-java = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }
protobuf-kotlin = { module = "com.google.protobuf:protobuf-kotlin", version.ref = "protobuf" }

# Security/Authentication
auth0-jwt = { module = "com.auth0:java-jwt", version.ref = "auth0-jwt" }
jbcrypt = { module = "org.mindrot:jbcrypt", version.ref = "jbcrypt" }

# Docker
docker-java-core = { module = "com.github.docker-java:docker-java-core", version.ref = "docker-java" }
docker-java-transport-httpclient5 = { module = "com.github.docker-java:docker-java-transport-httpclient5", version.ref = "docker-java-transport-httpclient5" }

# CLI
clikt = { module = "com.github.ajalt.clikt:clikt", version.ref = "clikt" }

# Testing
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }
kotest-framework-datatest = { module = "io.kotest:kotest-framework-datatest", version.ref = "kotest" }
kotest-assertions-json = { module = "io.kotest:kotest-assertions-json", version.ref = "kotest" }
kotest-extensions-koin = { module = "io.kotest.extensions:kotest-extensions-koin", version = "1.3.0" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
testcontainers-junit-jupiter = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }
koin-test = { module = "io.insert-koin:koin-test", version.ref = "koin" }

# Script
kotlin-scripting-jvm = { module = "org.jetbrains.kotlin:kotlin-scripting-jvm", version.ref = "kotlin" }
kotlin-scripting-jvm-host = { module = "org.jetbrains.kotlin:kotlin-scripting-jvm-host", version.ref = "kotlin" }
kotlin-scripting-common = { module = "org.jetbrains.kotlin:kotlin-scripting-common", version.ref = "kotlin" }
kotlin-scripting-dependencies = { module = "org.jetbrains.kotlin:kotlin-scripting-dependencies", version.ref = "kotlin" }
kotlin-scripting-dependencies-maven = { module = "org.jetbrains.kotlin:kotlin-scripting-dependencies-maven", version.ref = "kotlin" }
kotlin-scripting-util = { module = "org.jetbrains.kotlin:kotlin-scripting-util", version.ref = "kotlin" }
kotlin-compiler-embeddable = { module = "org.jetbrains.kotlin:kotlin-compiler-embeddable", version.ref = "kotlin" }

[bundles]
ktor-server = [
    "ktor-server-core",
    "ktor-server-netty",
    "ktor-server-content-negotiation",
    "ktor-server-auth",
    "ktor-server-auth-jwt",
    "ktor-server-websockets",
    "ktor-server-sse",
    "ktor-server-call-logging",
    "ktor-server-metrics-micrometer",
    "ktor-server-openapi",
    "ktor-server-cors",
    "ktor-server-compression"
]

kotlinx-libs = [
    "kotlinx-coroutines-core",
    "kotlinx-coroutines-jdk8",
    "kotlinx-serialization-json",
    "kotlinx-serialization-protobuf",
    "kotlinx-datetime"
]

exposed-libs = [
    "exposed-core",
    "exposed-jdbc",
    "exposed-dao",
    "exposed-kotlin-datetime",
    "exposed-migration"
]

database-libs = [
    "postgresql",
    "flyway-core",
    "flyway-database-postgresql",
    "hikaricp"
]

koin-libs = [
    "koin-core",
    "koin-ktor",
    "koin-logger-slf4j"
]

arrow-libs = [
    "arrow-core",
    "arrow-fx-coroutines"
]

logging-libs = [
    "logback-classic",
    "kotlin-logging"
]

observability-libs = [
    "micrometer-core",
    "micrometer-registry-prometheus",
    "opentelemetry-api",
    "opentelemetry-instrumentation-ktor"
]

grpc-libs = [
    "grpc-netty-shaded",
    "grpc-protobuf",
    "grpc-kotlin-stub",
    "grpc-services",
    "protobuf-java",
    "protobuf-kotlin"
]

security-libs = [
    "auth0-jwt",
    "jbcrypt"
]

testing-libs = [
    "kotest-runner-junit5",
    "kotest-assertions-core",
    "kotest-property",
    "kotest-framework-datatest",
    "kotest-assertions-json",
    "kotest-extensions-koin",
    "mockk",
    "testcontainers-junit-jupiter",
    "testcontainers-postgresql",
    "koin-test",
    "ktor-server-test-host"
]


[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
protobuf = { id = "com.google.protobuf", version = "0.9.4" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlint" }
shadow = { id = "com.github.johnrengelman.shadow", version.ref = "shadow" }