package dev.rubentxu.hodei.pipelines.dsl.builders

import dev.rubentxu.hodei.pipelines.dsl.model.*
import dev.rubentxu.hodei.pipelines.dsl.pipeline
import dev.rubentxu.hodei.pipelines.port.StageType
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.Assertions.*
import kotlin.test.assertEquals
import kotlin.test.assertTrue

/**
 * Tests para el sistema de builders del Pipeline DSL.
 */
class PipelineBuilderTest {

    @Test
    fun `should build simple pipeline with DSL`() {
        // Given/When
        val pipeline = pipeline("Simple Test Pipeline") {
            description("A simple test pipeline")
            
            stages {
                stage("Test Stage") {
                    steps {
                        echo("Hello World")
                        sh("echo 'Shell command'")
                    }
                }
            }
        }

        // Then
        assertEquals("Simple Test Pipeline", pipeline.name)
        assertEquals("A simple test pipeline", pipeline.description)
        assertEquals(1, pipeline.stages.size)
        
        val stage = pipeline.stages[0]
        assertEquals("Test Stage", stage.name)
        assertEquals(2, stage.steps.size)
        
        assertTrue(stage.steps[0] is Step.Echo)
        assertTrue(stage.steps[1] is Step.Shell)
    }

    @Test
    fun `should build pipeline with environment variables`() {
        // Given/When
        val pipeline = pipeline("Environment Test") {
            environment {
                "JAVA_HOME" to "/usr/lib/jvm/java-11"
                "PATH" to "/usr/bin:/bin"
                "CUSTOM_VAR" to "custom_value"
            }
            
            stages {
                stage("Env Stage") {
                    steps {
                        echo("Using environment")
                    }
                }
            }
        }

        // Then
        assertEquals(3, pipeline.environment.size)
        assertEquals("/usr/lib/jvm/java-11", pipeline.environment["JAVA_HOME"])
        assertEquals("/usr/bin:/bin", pipeline.environment["PATH"])
        assertEquals("custom_value", pipeline.environment["CUSTOM_VAR"])
    }

    @Test
    fun `should build pipeline with agent configuration`() {
        // Given/When
        val pipeline = pipeline("Agent Test") {
            agent {
                docker("openjdk:17") {
                    args("-v", "/var/run/docker.sock:/var/run/docker.sock")
                    user("1000:1000")
                }
            }
            
            stages {
                stage("Agent Stage") {
                    steps {
                        echo("Running on agent")
                    }
                }
            }
        }

        // Then
        assertNotNull(pipeline.agent)
        assertNotNull(pipeline.agent?.docker)
        assertEquals("openjdk:17", pipeline.agent?.docker?.image)
        assertTrue(pipeline.agent?.docker?.args?.contains("-v"))
        assertEquals("1000:1000", pipeline.agent?.docker?.user)
    }

    @Test
    fun `should build pipeline with parameters`() {
        // Given/When
        val pipeline = pipeline("Parameters Test") {
            parameters {
                string("DEPLOY_ENV") {
                    defaultValue = "development"
                    description = "Target environment"
                    choices = listOf("dev", "staging", "prod")
                }
                
                boolean("SKIP_TESTS") {
                    defaultValue = false
                    description = "Skip test execution"
                }
            }
            
            stages {
                stage("Param Stage") {
                    steps {
                        echo("Using parameters")
                    }
                }
            }
        }

        // Then
        assertEquals(2, pipeline.parameters.size)
        
        val deployEnvParam = pipeline.parameters["DEPLOY_ENV"]
        assertNotNull(deployEnvParam)
        assertEquals(ParameterType.STRING, deployEnvParam?.type)
        assertEquals("development", deployEnvParam?.defaultValue)
        assertEquals(3, deployEnvParam?.choices?.size)
        
        val skipTestsParam = pipeline.parameters["SKIP_TESTS"]
        assertNotNull(skipTestsParam)
        assertEquals(ParameterType.BOOLEAN, skipTestsParam?.type)
        assertEquals(false, skipTestsParam?.defaultValue)
    }

    @Test
    fun `should build pipeline with triggers`() {
        // Given/When
        val pipeline = pipeline("Triggers Test") {
            triggers {
                cron("H 2 * * 1-5")
                scm("H/15 * * * *")
                upstream(projects = listOf("dependency-project"), threshold = "SUCCESS")
            }
            
            stages {
                stage("Trigger Stage") {
                    steps {
                        echo("Triggered execution")
                    }
                }
            }
        }

        // Then
        assertEquals(3, pipeline.triggers.size)
        
        assertTrue(pipeline.triggers[0] is Trigger.Cron)
        assertTrue(pipeline.triggers[1] is Trigger.SCM)
        assertTrue(pipeline.triggers[2] is Trigger.Upstream)
        
        val cronTrigger = pipeline.triggers[0] as Trigger.Cron
        assertEquals("H 2 * * 1-5", cronTrigger.expression)
    }

    @Test
    fun `should build stage with conditional execution`() {
        // Given/When
        val pipeline = pipeline("Conditional Test") {
            stages {
                stage("Conditional Stage") {
                    `when` {
                        branch("main", "develop")
                        environment("BUILD_TYPE", "release")
                    }
                    
                    steps {
                        echo("Conditional execution")
                    }
                }
            }
        }

        // Then
        val stage = pipeline.stages[0]
        assertNotNull(stage.whenCondition)
        assertTrue(stage.whenCondition is WhenCondition.AllOf)
        
        val conditions = (stage.whenCondition as WhenCondition.AllOf).conditions
        assertEquals(2, conditions.size)
        assertTrue(conditions[0] is WhenCondition.AnyOf) // branch() creates AnyOf
        assertTrue(conditions[1] is WhenCondition.Environment)
    }

    @Test
    fun `should build stage with parallel execution`() {
        // Given/When
        val pipeline = pipeline("Parallel Test") {
            stages {
                stage("Main Stage") {
                    parallel(failFast = false) {
                        stage("Parallel 1") {
                            steps {
                                echo("Parallel execution 1")
                            }
                        }
                        
                        stage("Parallel 2") {
                            steps {
                                echo("Parallel execution 2")
                            }
                        }
                    }
                }
            }
        }

        // Then
        val stage = pipeline.stages[0]
        assertNotNull(stage.parallel)
        assertEquals(false, stage.parallel?.failFast)
        assertEquals(2, stage.parallel?.stages?.size)
        
        val parallelStages = stage.parallel?.stages!!
        assertEquals("Parallel 1", parallelStages[0].name)
        assertEquals("Parallel 2", parallelStages[1].name)
    }

    @Test
    fun `should build stage with tools and options`() {
        // Given/When
        val pipeline = pipeline("Tools Test") {
            stages {
                stage("Tools Stage") {
                    tools {
                        gradle("7.6")
                        jdk("17")
                        docker("latest")
                    }
                    
                    options {
                        timeout(30, TimeUnit.MINUTES)
                        retry(2, RetryCondition.FAILURE)
                        timestamps()
                    }
                    
                    steps {
                        echo("Using tools")
                    }
                }
            }
        }

        // Then
        val stage = pipeline.stages[0]
        assertEquals(3, stage.tools.size)
        
        assertTrue(stage.tools.any { it is Tool.Gradle })
        assertTrue(stage.tools.any { it is Tool.JDK })
        assertTrue(stage.tools.any { it is Tool.Docker })
        
        assertNotNull(stage.options)
        assertNotNull(stage.options?.timeout)
        assertEquals(30, stage.options?.timeout?.time)
        assertEquals(TimeUnit.MINUTES, stage.options?.timeout?.unit)
    }

    @Test
    fun `should build complex step types`() {
        // Given/When
        val pipeline = pipeline("Complex Steps Test") {
            stages {
                stage("Complex Stage") {
                    steps {
                        checkout {
                            git {
                                url = "https://github.com/company/repo.git"
                                branch = "main"
                                shallow = true
                                depth = 1
                            }
                        }
                        
                        archiveArtifacts {
                            artifacts = "build/libs/*.jar"
                            allowEmptyArchive = false
                            fingerprint = true
                        }
                        
                        publishTestResults {
                            testResultsPattern = "build/test-results/**/*.xml"
                            allowEmptyResults = false
                            checksName = "Unit Tests"
                        }
                        
                        docker {
                            build {
                                tag = "myapp:latest"
                                dockerfile = "Dockerfile"
                                context = "."
                            }
                        }
                        
                        notification {
                            message = "Build completed"
                            slack {
                                channel = "#builds"
                                color = "good"
                            }
                        }
                    }
                }
            }
        }

        // Then
        val stage = pipeline.stages[0]
        assertEquals(5, stage.steps.size)
        
        assertTrue(stage.steps[0] is Step.Checkout)
        assertTrue(stage.steps[1] is Step.ArchiveArtifacts)
        assertTrue(stage.steps[2] is Step.PublishTestResults)
        assertTrue(stage.steps[3] is Step.Docker)
        assertTrue(stage.steps[4] is Step.Notification)
    }

    @Test
    fun `should build pipeline with post actions`() {
        // Given/When
        val pipeline = pipeline("Post Actions Test") {
            stages {
                stage("Main Stage") {
                    steps {
                        echo("Main execution")
                    }
                    
                    post {
                        always {
                            echo("Always executed")
                        }
                        
                        success {
                            notification {
                                message = "Stage succeeded"
                            }
                        }
                        
                        failure {
                            notification {
                                message = "Stage failed"
                            }
                        }
                    }
                }
            }
            
            post {
                always {
                    echo("Pipeline cleanup")
                }
                
                success {
                    echo("Pipeline succeeded")
                }
                
                failure {
                    echo("Pipeline failed")
                }
            }
        }

        // Then
        val stage = pipeline.stages[0]
        assertNotNull(stage.post)
        assertEquals(1, stage.post?.always?.size)
        assertEquals(1, stage.post?.success?.size)
        assertEquals(1, stage.post?.failure?.size)
        
        assertNotNull(pipeline.post)
        assertEquals(1, pipeline.post?.always?.size)
        assertEquals(1, pipeline.post?.success?.size)
        assertEquals(1, pipeline.post?.failure?.size)
    }
}